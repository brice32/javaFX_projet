package contacts.emb.dao.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import contacts.emb.dao.IDaoAnnonce;
import contacts.emb.dom.Annonce;
import contacts.emb.dom.Annonceur;
import contacts.emb.dom.Rubrique;
import contacts.emb.dom.Zone;

public class DaoAnnonce implements IDaoAnnonce{

	// Champs

	private DataSource dataSource;

	// Injecteurs
	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
	}

	// Action
	@Override
	public List<Annonce> listerTout() {
		Connection cn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String sql;

		try {
			cn = dataSource.getConnection();

			sql = "SELECT * FROM Annonce ORDER BY dateDebut";
			stmt = cn.prepareStatement(sql);
			rs = stmt.executeQuery();

			List<Annonce> annonce = new ArrayList<>();
			while (rs.next()) {
				annonce.add(construireAnnonce(rs));
			}
			return annonce;

		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (SQLException e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException e) {
			}
			try {
				if (cn != null)
					cn.close();
			} catch (SQLException e) {
			}
		}
	}

	private Annonceur retrouverAnnonceur(int idAnnonceur) {
		Connection cn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String sql;

		try {
			cn = dataSource.getConnection();

			sql = "SELECT * FROM Annonceur WHERE idAnnonceur = ?";
			stmt = cn.prepareStatement(sql);
			stmt.setInt(1, idAnnonceur);
			rs = stmt.executeQuery();

			if (rs.next()) {
				return construireAnnonceur(rs);
			} else {
				return null;
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (SQLException e) {
			}
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException e) {
			}
			try {
				if (cn != null)
					cn.close();
			} catch (SQLException e) {
			}
		}
	}

	public Zone retrouverZone(int idZone)  {

		Connection			cn		= null;
		PreparedStatement	stmt	= null;
		ResultSet 			rs 		= null;
		String				sql;

		try {
			cn = dataSource.getConnection();

			sql = "SELECT * FROM Zone WHERE idZone = ?";
            stmt = cn.prepareStatement(sql);
            stmt.setInt(1, idZone);
            rs = stmt.executeQuery();

            if ( rs.next() ) {
                return construireZone(rs);
            } else {
            	return null;
            }
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			try { if (rs != null) rs.close();} catch (SQLException e) {}
			try { if (stmt != null) stmt.close();} catch (SQLException e) {}
			try { if (cn != null) cn.close();} catch (SQLException e) {}
		}
	}

	public Rubrique retrouverRubrique (int idRubrique)  {

		Connection			cn		= null;
		PreparedStatement	stmt	= null;
		ResultSet 			rs 		= null;
		String				sql;

		try {
			cn = dataSource.getConnection();

			sql = "SELECT * FROM Rubrique WHERE idRubrique = ?";
            stmt = cn.prepareStatement(sql);
            stmt.setInt(1, idRubrique);
            rs = stmt.executeQuery();

            if ( rs.next() ) {
                return construireRubrique(rs);
            } else {
            	return null;
            }
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			try { if (rs != null) rs.close();} catch (SQLException e) {}
			try { if (stmt != null) stmt.close();} catch (SQLException e) {}
			try { if (cn != null) cn.close();} catch (SQLException e) {}
		}
	}

	// Mé thodes auxiliaires

	private Annonce construireAnnonce(ResultSet rs) throws SQLException {
		Annonce annonce = new Annonce();
		annonce.setIdAnnonce(rs.getInt("idAnnonce"));
		annonce.setTitre(rs.getString("titre"));
		annonce.setDescription(rs.getString("description"));
		annonce.setStatute(rs.getString("statut"));
		annonce.setDateDebut(rs.getDate("dateDebut"));
		annonce.setDateFin(rs.getDate("dateFin"));
		annonce.setHeureDebut(rs.getTime("heureDebut"));
		annonce.setHeureFin(rs.getTime("heureFin"));
		annonce.setLieuNom(rs.getString("lieuNom"));
		annonce.setLieuAdresse(rs.getString("lieuAdresse"));
		annonce.setLieuCp(rs.getString("lieuCp"));
		annonce.setLieuVille(rs.getString("lieuVille"));
		annonce.setAnimateurNom(rs.getString("animateurNom"));
		annonce.setAnimateurQualification(rs.getString("animateurQualification"));
		annonce.setOrganisateurNom(rs.getString("organisateurNom"));
		annonce.setOrganisateurSiteWeb(rs.getString("organisateurSiteWeb"));
		annonce.setOrganisateurEmail(rs.getString("organisateurEmail"));
		annonce.setOrganisateurTelephone(rs.getString("organisateurTelephone"));
		int idAnnocneur = rs.getInt("idAnnonceur");
		Annonceur annonceur = retrouverAnnonceur(idAnnocneur);
		annonce.setAnnonceur(annonceur);
		int idRubrique  = rs.getInt("idRubrique");
		Rubrique rubrique = retrouverRubrique(idRubrique);
		annonce.setRubrique(rubrique);
		int idZone 	= rs.getInt("idZone");
		Zone zone = retrouverZone(idZone);
		annonce.setZone(zone);
		return annonce;
	}

	private Annonceur construireAnnonceur(ResultSet rs) throws SQLException {
		Annonceur annonceur = new Annonceur();
		annonceur.setId(rs.getInt("idAnnonceur"));
		annonceur.setNom(rs.getString("nom"));
		annonceur.setTelephone(rs.getString("telephone"));
		annonceur.setEmail(rs.getString("email"));
		annonceur.setLieuNom(rs.getString("lieuNom"));
		annonceur.setLieuAdresse(rs.getString("lieuAdresse"));
		annonceur.setLieuCp(rs.getString("lieuCp"));
		annonceur.setLieuVille(rs.getString("lieuVille"));
		annonceur.setSiteWeb(rs.getString("siteWeb"));
		return annonceur;
	}

	private Zone construireZone( ResultSet rs ) throws SQLException {
		 Zone zone = new Zone();
		 zone.setId( rs.getInt( "idZone" ) );
		 zone.setNom( rs.getString( "nom" ) );

		 return zone;
	}

	private Rubrique construireRubrique( ResultSet rs ) throws SQLException {
		Rubrique Rubrique = new Rubrique();
		 Rubrique.setId( rs.getInt( "idRubrique" ) );
		 Rubrique.setNom( rs.getString( "nom" ) );

		 return Rubrique;
	}
}
